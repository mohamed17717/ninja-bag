function copyToClipboard(text){const elem=document.createElement("textarea");elem.value=text,document.body.appendChild(elem),elem.select(),document.execCommand("copy"),document.body.removeChild(elem)}function notify(msg,type){if(document.querySelector(".notification"))return;const colors={success:"bg-green-700",failed:"bg-red-700",error:"bg-red-700"},color=colors[type],elm=document.createElement("div"),classes=`notification fixed ${color} py-3 px-5 text-center right-0 bottom-10 capitalize text-white font-bold opacity-70 transition transform translate-x-full z-10`;elm.setAttribute("class",classes),elm.innerText=msg,document.body.appendChild(elm),setTimeout(()=>{elm.classList.remove("translate-x-full"),setTimeout(()=>{elm.classList.add("translate-x-full"),setTimeout(()=>{elm.remove()},100)},2e3)},100)}function escapeHTML(unsafeText){let div=document.createElement("div");return div.innerText=unsafeText,div.innerHTML}function toHTML(text,forceSpace=!0){let t=text;return t=t.replace(/\n/g,"<br>"),forceSpace&&(t=t.replace(/ /g,"&nbsp;")),t}function setButtonLink(){document.querySelectorAll('button[role="link"]').forEach(btn=>{btn.addEventListener("click",e=>{const href=e.target.dataset.href,a=document.createElement("a");a.href=href,a.style.cssText="opacity: 0;",document.body.appendChild(a),a.click(),a.remove()})})}function readBackendJsonById(elmId){return JSON.parse(document.getElementById(elmId).textContent)}function htmlToText(html){const elm=document.createElement("div");return elm.innerHTML=html,elm.innerText}function isFormValid(form){const inputs=form.querySelectorAll("input");for(let input of inputs){const isInputValid=input.checkValidity();if(!isInputValid)return notify(`input ${input.name} is not valid`,"error"),!1}return!0}const textareaAutoGrow=(elm,h)=>{elm.style.height=h,elm.style.height=elm.scrollHeight+"px"},closeDialogOnEscape=(thisObj,toggleKeyword)=>{const close=e=>{"Escape"===e.code&&(thisObj[toggleKeyword]=!1),!1===thisObj[toggleKeyword]&&document.removeEventListener("keyup",close)};document.addEventListener("keyup",close)},sendRequestToBackend=(thisObj,descriptionName)=>{const requestConfig={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({description:thisObj[descriptionName]})};fetch(thisObj.url,requestConfig).then(res=>{if(thisObj.isButtonLoading=!1,!(res.status<250))return res.text();thisObj[descriptionName]="",notify("Sent","success")}).then(text=>{text&&notify(text,"failed")}).catch(err=>{console.error(err)})},isValidDescription=(thisObj,descriptionName)=>(thisObj.isButtonLoading=!0,!!thisObj[descriptionName].trim().length||(setTimeout(()=>{thisObj.isButtonLoading=!1},1e3),notify("can't send empty message.","failed"),!1));function toolSuggestionData(){return{url:suggestToolUrl,toolDescription:"",isButtonLoading:!1,buttonStates:{loading:'<div class="lds-ripple"><div></div><div></div></div>',normal:"send"},textareaAutoGrow(){elm=this.$refs.suggestionTextarea,textareaAutoGrow(elm,"6rem")},submitToolSuggestion(){const descriptionName="toolDescription";isValidDescription(this,descriptionName)&&sendRequestToBackend(this,descriptionName)}}}function toolIssueButtonData(){return{url:toolIssueUrl,issueDescription:"",isOpen:!1,isButtonLoading:!1,buttonStates:{loading:'<div class="lds-ripple" style="left:42%;"><div></div><div></div></div>',normal:"send"},closeDialogOnEscape(){closeDialogOnEscape(this,"isOpen")},textareaAutoGrow(){elm=this.$refs.reportIssueTextarea,textareaAutoGrow(elm,"8rem")},submitToolReport(){const descriptionName="issueDescription";isValidDescription(this,descriptionName)&&sendRequestToBackend(this,descriptionName)}}}function renderEndpoints(){let endpoints;return{endpoints:readBackendJsonById("tool-endpoints").map(ep=>Endpoint.generate(ep)),getHttpHeaderContentType(endpoint){const dataType=endpoint.dataType,dataTypeMap={form:"Content-Type: multipart/form-data",json:"Content-Type: application/json",text:"Content-Type: text/plain"};return dataTypeMap[dataType]||""},generateHttpHeaderSyntax(endpoint){const method=endpoint.method.toUpperCase(),path=endpoint.url,httpContentType=this.getHttpHeaderContentType(endpoint),httpVersion="HTTP/1.1";return`${method} ${path} HTTP/1.1\n${httpContentType}`.trim()},getParamInputAtributes(param){const value=param.default||"",acceptImage='accept="image/png, image/jpeg"',required=param.required?"required":"";let type=param.type,accept="";"image"===type&&(accept=acceptImage,type="file");const klass="file"===type?"mb-2":"mb-2 text-primary-700";return`class="${klass}" name="${param.name}" type="${type}" value="${value}" ${accept} ${required}`},generateHttpBodySyntax(endpoint){const dataType=endpoint.dataType;let httpBody="";if("json"===dataType)httpBodyJson={},endpoint.params.POST.map(param=>httpBodyJson[param.name]=param.default),httpBody=JSON.stringify(httpBodyJson,null,2);else if("form"===dataType){endpoint.params.POST.map(param=>{const inputAttributes=this.getParamInputAtributes(param);httpBody+=`${param.name}: <input ${inputAttributes}> <br>`});const formId=`form-id-${Math.random().toString(36).slice(-5)}`;httpBody=`<form @submit.prevent="console.log('run')" id="${formId}">${httpBody}</form>`}else"text"===dataType&&(httpBody=endpoint.defaultText);return console.log("dataType:",dataType),console.log("httpBody:",httpBody),httpBody},getHttpSyntaxHeader(endpoint){return toHTML(this.generateHttpHeaderSyntax(endpoint))},getHttpSyntaxBody(endpoint){console.log("this is body funcion");const forceAllSpaces="json"===endpoint.dataType||"text"===endpoint.dataType;return toHTML(this.generateHttpBodySyntax(endpoint),forceAllSpaces)},getHttpSyntax(endpoint,forceUpdate=!1){endpoint.httpSyntaxHeader.length&&!forceUpdate||(endpoint.httpSyntaxHeader=this.getHttpSyntaxHeader(endpoint),Endpoint.isHttpHasBody(endpoint)&&(endpoint.httpSyntaxBody=this.getHttpSyntaxBody(endpoint)))},resetHttpSyntax(endpoint){this.getHttpSyntax(endpoint,!0)},setupPopupAndOpen(endpoint,popupInfo){const{url:url,method:method,body:body,headers:headers}=popupInfo;endpoint.popupInfo.url=url,endpoint.popupInfo.method=method,endpoint.popupInfo.body=body,endpoint.popupInfo.headers=headers,endpoint.popupInfo.response.html="",endpoint.popupInfo.response.type="",endpoint.popupInfo.response.blobUrl="",endpoint.popupInfo.response.blobHasView=!1,endpoint.popupInfo.response.code=0,endpoint.popupInfo.isLoading=!0,endpoint.popup=!0},closeDialogOnEscape(endpoint){closeDialogOnEscape(endpoint,"popup")},runRequest(endpoint){this.closeDialogOnEscape(endpoint);const httpParser=new HTTPSyntaxParser(endpoint);let url=httpParser.getUrl();if(!url)return void notify("invalid url","error");let method=httpParser.getMethod();if(!method)return void notify("Method not matched","error");let headers=httpParser.getHeaders();const body=httpParser.getBody();if(Endpoint.isHttpHasBody(endpoint)&&void 0===body)return void notify("invalid syntax body","error");const popupInfo={url:url,method:method,headers:headers,body:body};this.setupPopupAndOpen(endpoint,popupInfo),fetch(url,{method:method,body:body,headers:headers}).then(res=>(endpoint.popupInfo.response.code=res.status,endpoint.popupInfo.response.type=res.statusText,res.blob())).then(blob=>{const resStatusText=endpoint.popupInfo.response.type;endpoint.popupInfo.response.blobUrl=URL.createObjectURL(blob),endpoint.popupInfo.response.type=`${resStatusText} (${blob.type})`,endpoint.popupInfo.response.blobHasView=blob.size>0}).catch(err=>console.error(err)).finally(()=>endpoint.popupInfo.isLoading=!1)},showEndpointInfo(endpoint){endpoint.isOpen?endpoint.isOpen=!1:(this.endpoints.forEach(e=>e.isOpen=!1),endpoint.isOpen=!0)}}}

function getFooterData() {
  return {
    year: new Date().getFullYear(),
    author: "Mohamed Mahmoud",
    email: "d3v.mhmd@gmail.com",
    url: 'https://devmhmd.com',

    getAuthor() {
      return `<b><a href="${this.url}" target="_blank">${this.author}</a></b>`;
    },

    getPhrase() {
      return `© ${this.year} — Developed with ❤️ by ${this.getAuthor()}`;
    },
  };
}


setButtonLink();
function ToolDatabaseRecordsData() {return {confirmDelete (e) {const href = e.target.href;if(confirm('Do you really wanna delete this file ? you will lose it forever.')){window.location.href = href;}},copyFileName(fileName) {copyToClipboard(fileName);notify('Copied', 'success');}}}

pasteWithoutFormat = (e) => {
  e.preventDefault()
  // get text representation of clipboard
  const text = (e.originalEvent || e).clipboardData.getData('text/plain');
  // insert text manually
  document.execCommand("insertHTML", false, text);
}
